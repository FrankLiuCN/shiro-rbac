<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.frank.dao.UserDao">
	<resultMap type="com.frank.entity.User" id="BaseResultMap">
		<id column="user_id" property="userID" jdbcType="INTEGER" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="nick_name" property="nickName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="last_login_time" property="lastLoginTime"
			jdbcType="TIMESTAMP" />
		<result column="status" property="status" jdbcType="BIGINT" />
	</resultMap>

	<sql id="Base_Column_List">
		user_id, login_name, nick_name, password, create_time,
		last_login_time,status
	</sql>

	<select id="queryUserByLoginName" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from User
		where login_name=#{loginName}
	</select>

	<select id="queryUsers" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from User where 1=1 
		<if test="fuzzy!=null">
		and (login_name like CONCAT('%',#{fuzzy},'%') or nick_name like CONCAT('%',#{fuzzy},'%'))
		</if>
		order by create_time desc
	</select>

	<update id="updateLastLoginTime">
		update User set last_login_time=now() where
		login_name=#{loginName}
	</update>

	<insert id="addUser" useGeneratedKeys="true" keyProperty="user_id"
		parameterType="com.frank.entity.User">
		insert into User
		(login_name,nick_name,password,create_time,status)
		values
		(#{loginName},#{nickName},#{password},now(),#{status})
	</insert>
	
	<update id="editUser" parameterType="com.frank.entity.User">
		update User set 
		login_name=#{loginName}
		,nick_name=#{nickName}
		,status=#{status}
		<if test="password!=null and password!=''">
		,password=#{password}
		</if>
		where user_id=#{userID}
	</update>
	
	<select id="queryUserByUserID" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from User
		where user_id=#{userID}
	</select>
	
	<delete id="deleteUser">
		delete from user where user_id in
		<foreach collection="array" item="userID" index="index" open="(" separator="," close=")">
			#{userID}
		</foreach>
	</delete>

</mapper>